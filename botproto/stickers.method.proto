syntax = "proto3";

package botproto;

import "tgbotapi.proto";

// return Message
// Use this method to send static .WEBP or animated .TGS stickers. On success, the sent Message is returned.
message sendSticker {
	int32       chat_id              = 1; // Yes Unique identifier for the target chat or username of the target channel (in the format )
	string      sticker              = 2; // Yes Sticker to send. Pass a file_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a .webp file from the Internet, or upload a new one using multipart/form-data. More info on Sending Files »
	bool        disable_notification = 3; // Optional Sends the message silently. Users will receive a notification with no sound.
	int32       reply_to_message_id  = 4; // Optional If the message is a reply, ID of the original message
	ReplyMarkup reply_markup         = 5; // Optional Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
}

// return 
// Use this method to get a sticker set. On success, a StickerSet object is returned.
message getStickerSet {
	string name = 1; // Yes Name of the sticker set
}

// return File
// Use this method to upload a .png file with a sticker for later use in createNewStickerSet and addStickerToSet methods (can be used multiple times). Returns the uploaded File on success.
message uploadStickerFile {
	int32     user_id     = 1; // Yes User identifier of sticker file owner
	InputFile png_sticker = 2; // Yes  image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px, and either width or height must be exactly 512px. More info on Sending Files »
}

// return True
// Use this method to create new sticker set owned by a user. The bot will be able to edit the created sticker set. Returns True on success.
message createNewStickerSet {
	int32        user_id        = 1; // Yes User identifier of created sticker set owner
	string       name           = 2; // Yes Short name of sticker set, to be used in  URLs (e.g., animals). Can contain only english letters, digits and underscores. Must begin with a letter, can't contain consecutive underscores and must end in “_by_<bot username>”. <bot_username> is case insensitive. 1-64 characters.
	string       title          = 3; // Yes Sticker set title, 1-64 characters
	string       png_sticker    = 4; // Yes  image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px, and either width or height must be exactly 512px. Pass a file_id as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. More info on Sending Files »
	string       emojis         = 5; // Yes One or more emoji corresponding to the sticker
	bool         contains_masks = 6; // Optional Pass True, if a set of mask stickers should be created
	MaskPosition mask_position  = 7; // Optional A JSON-serialized object for position where the mask should be placed on faces
}

// return True
// Use this method to move a sticker in a set created by the bot to a specific position . Returns True on success.
message setStickerPositionInSet {
	string sticker  = 1; // Yes File identifier of the sticker
	int32  position = 2; // Yes New sticker position in the set, zero-based
}

// return True
// Use this method to delete a sticker from a set created by the bot. Returns True on success.
message deleteStickerFromSet {
	string sticker = 1; // Yes File identifier of the sticker
}

