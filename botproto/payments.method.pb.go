// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: payments.method.proto

package botproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// return Message
// Use this method to send invoices. On success, the sent Message is returned.
type SendInvoice struct {
	ChatId                    int32                 `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Title                     string                `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description               string                `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Payload                   string                `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	ProviderToken             string                `protobuf:"bytes,5,opt,name=provider_token,json=providerToken,proto3" json:"provider_token,omitempty"`
	StartParameter            string                `protobuf:"bytes,6,opt,name=start_parameter,json=startParameter,proto3" json:"start_parameter,omitempty"`
	Currency                  string                `protobuf:"bytes,7,opt,name=currency,proto3" json:"currency,omitempty"`
	Prices                    []*LabeledPrice       `protobuf:"bytes,8,rep,name=prices" json:"prices,omitempty"`
	ProviderData              string                `protobuf:"bytes,9,opt,name=provider_data,json=providerData,proto3" json:"provider_data,omitempty"`
	PhotoUrl                  string                `protobuf:"bytes,10,opt,name=photo_url,json=photoUrl,proto3" json:"photo_url,omitempty"`
	PhotoSize                 int32                 `protobuf:"varint,11,opt,name=photo_size,json=photoSize,proto3" json:"photo_size,omitempty"`
	PhotoWidth                int32                 `protobuf:"varint,12,opt,name=photo_width,json=photoWidth,proto3" json:"photo_width,omitempty"`
	PhotoHeight               int32                 `protobuf:"varint,13,opt,name=photo_height,json=photoHeight,proto3" json:"photo_height,omitempty"`
	NeedName                  bool                  `protobuf:"varint,14,opt,name=need_name,json=needName,proto3" json:"need_name,omitempty"`
	NeedPhoneNumber           bool                  `protobuf:"varint,15,opt,name=need_phone_number,json=needPhoneNumber,proto3" json:"need_phone_number,omitempty"`
	NeedEmail                 bool                  `protobuf:"varint,16,opt,name=need_email,json=needEmail,proto3" json:"need_email,omitempty"`
	NeedShippingAddress       bool                  `protobuf:"varint,17,opt,name=need_shipping_address,json=needShippingAddress,proto3" json:"need_shipping_address,omitempty"`
	SendPhoneNumberToProvider bool                  `protobuf:"varint,18,opt,name=send_phone_number_to_provider,json=sendPhoneNumberToProvider,proto3" json:"send_phone_number_to_provider,omitempty"`
	SendEmailToProvider       bool                  `protobuf:"varint,19,opt,name=send_email_to_provider,json=sendEmailToProvider,proto3" json:"send_email_to_provider,omitempty"`
	IsFlexible                bool                  `protobuf:"varint,20,opt,name=is_flexible,json=isFlexible,proto3" json:"is_flexible,omitempty"`
	DisableNotification       bool                  `protobuf:"varint,21,opt,name=disable_notification,json=disableNotification,proto3" json:"disable_notification,omitempty"`
	ReplyToMessageId          int32                 `protobuf:"varint,22,opt,name=reply_to_message_id,json=replyToMessageId,proto3" json:"reply_to_message_id,omitempty"`
	ReplyMarkup               *InlineKeyboardMarkup `protobuf:"bytes,23,opt,name=reply_markup,json=replyMarkup" json:"reply_markup,omitempty"`
}

func (m *SendInvoice) Reset()                    { *m = SendInvoice{} }
func (m *SendInvoice) String() string            { return proto.CompactTextString(m) }
func (*SendInvoice) ProtoMessage()               {}
func (*SendInvoice) Descriptor() ([]byte, []int) { return fileDescriptorPaymentsMethod, []int{0} }

func (m *SendInvoice) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *SendInvoice) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *SendInvoice) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *SendInvoice) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *SendInvoice) GetProviderToken() string {
	if m != nil {
		return m.ProviderToken
	}
	return ""
}

func (m *SendInvoice) GetStartParameter() string {
	if m != nil {
		return m.StartParameter
	}
	return ""
}

func (m *SendInvoice) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *SendInvoice) GetPrices() []*LabeledPrice {
	if m != nil {
		return m.Prices
	}
	return nil
}

func (m *SendInvoice) GetProviderData() string {
	if m != nil {
		return m.ProviderData
	}
	return ""
}

func (m *SendInvoice) GetPhotoUrl() string {
	if m != nil {
		return m.PhotoUrl
	}
	return ""
}

func (m *SendInvoice) GetPhotoSize() int32 {
	if m != nil {
		return m.PhotoSize
	}
	return 0
}

func (m *SendInvoice) GetPhotoWidth() int32 {
	if m != nil {
		return m.PhotoWidth
	}
	return 0
}

func (m *SendInvoice) GetPhotoHeight() int32 {
	if m != nil {
		return m.PhotoHeight
	}
	return 0
}

func (m *SendInvoice) GetNeedName() bool {
	if m != nil {
		return m.NeedName
	}
	return false
}

func (m *SendInvoice) GetNeedPhoneNumber() bool {
	if m != nil {
		return m.NeedPhoneNumber
	}
	return false
}

func (m *SendInvoice) GetNeedEmail() bool {
	if m != nil {
		return m.NeedEmail
	}
	return false
}

func (m *SendInvoice) GetNeedShippingAddress() bool {
	if m != nil {
		return m.NeedShippingAddress
	}
	return false
}

func (m *SendInvoice) GetSendPhoneNumberToProvider() bool {
	if m != nil {
		return m.SendPhoneNumberToProvider
	}
	return false
}

func (m *SendInvoice) GetSendEmailToProvider() bool {
	if m != nil {
		return m.SendEmailToProvider
	}
	return false
}

func (m *SendInvoice) GetIsFlexible() bool {
	if m != nil {
		return m.IsFlexible
	}
	return false
}

func (m *SendInvoice) GetDisableNotification() bool {
	if m != nil {
		return m.DisableNotification
	}
	return false
}

func (m *SendInvoice) GetReplyToMessageId() int32 {
	if m != nil {
		return m.ReplyToMessageId
	}
	return 0
}

func (m *SendInvoice) GetReplyMarkup() *InlineKeyboardMarkup {
	if m != nil {
		return m.ReplyMarkup
	}
	return nil
}

func init() {
	proto.RegisterType((*SendInvoice)(nil), "botproto.sendInvoice")
}
func (m *SendInvoice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendInvoice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPaymentsMethod(dAtA, i, uint64(m.ChatId))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPaymentsMethod(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPaymentsMethod(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.Payload) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPaymentsMethod(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	if len(m.ProviderToken) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPaymentsMethod(dAtA, i, uint64(len(m.ProviderToken)))
		i += copy(dAtA[i:], m.ProviderToken)
	}
	if len(m.StartParameter) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPaymentsMethod(dAtA, i, uint64(len(m.StartParameter)))
		i += copy(dAtA[i:], m.StartParameter)
	}
	if len(m.Currency) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPaymentsMethod(dAtA, i, uint64(len(m.Currency)))
		i += copy(dAtA[i:], m.Currency)
	}
	if len(m.Prices) > 0 {
		for _, msg := range m.Prices {
			dAtA[i] = 0x42
			i++
			i = encodeVarintPaymentsMethod(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ProviderData) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintPaymentsMethod(dAtA, i, uint64(len(m.ProviderData)))
		i += copy(dAtA[i:], m.ProviderData)
	}
	if len(m.PhotoUrl) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintPaymentsMethod(dAtA, i, uint64(len(m.PhotoUrl)))
		i += copy(dAtA[i:], m.PhotoUrl)
	}
	if m.PhotoSize != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintPaymentsMethod(dAtA, i, uint64(m.PhotoSize))
	}
	if m.PhotoWidth != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintPaymentsMethod(dAtA, i, uint64(m.PhotoWidth))
	}
	if m.PhotoHeight != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintPaymentsMethod(dAtA, i, uint64(m.PhotoHeight))
	}
	if m.NeedName {
		dAtA[i] = 0x70
		i++
		if m.NeedName {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.NeedPhoneNumber {
		dAtA[i] = 0x78
		i++
		if m.NeedPhoneNumber {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.NeedEmail {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		if m.NeedEmail {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.NeedShippingAddress {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		if m.NeedShippingAddress {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SendPhoneNumberToProvider {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		if m.SendPhoneNumberToProvider {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SendEmailToProvider {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		if m.SendEmailToProvider {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsFlexible {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		if m.IsFlexible {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DisableNotification {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		if m.DisableNotification {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ReplyToMessageId != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPaymentsMethod(dAtA, i, uint64(m.ReplyToMessageId))
	}
	if m.ReplyMarkup != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPaymentsMethod(dAtA, i, uint64(m.ReplyMarkup.Size()))
		n1, err := m.ReplyMarkup.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func encodeFixed64PaymentsMethod(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32PaymentsMethod(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintPaymentsMethod(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SendInvoice) Size() (n int) {
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovPaymentsMethod(uint64(m.ChatId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPaymentsMethod(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovPaymentsMethod(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovPaymentsMethod(uint64(l))
	}
	l = len(m.ProviderToken)
	if l > 0 {
		n += 1 + l + sovPaymentsMethod(uint64(l))
	}
	l = len(m.StartParameter)
	if l > 0 {
		n += 1 + l + sovPaymentsMethod(uint64(l))
	}
	l = len(m.Currency)
	if l > 0 {
		n += 1 + l + sovPaymentsMethod(uint64(l))
	}
	if len(m.Prices) > 0 {
		for _, e := range m.Prices {
			l = e.Size()
			n += 1 + l + sovPaymentsMethod(uint64(l))
		}
	}
	l = len(m.ProviderData)
	if l > 0 {
		n += 1 + l + sovPaymentsMethod(uint64(l))
	}
	l = len(m.PhotoUrl)
	if l > 0 {
		n += 1 + l + sovPaymentsMethod(uint64(l))
	}
	if m.PhotoSize != 0 {
		n += 1 + sovPaymentsMethod(uint64(m.PhotoSize))
	}
	if m.PhotoWidth != 0 {
		n += 1 + sovPaymentsMethod(uint64(m.PhotoWidth))
	}
	if m.PhotoHeight != 0 {
		n += 1 + sovPaymentsMethod(uint64(m.PhotoHeight))
	}
	if m.NeedName {
		n += 2
	}
	if m.NeedPhoneNumber {
		n += 2
	}
	if m.NeedEmail {
		n += 3
	}
	if m.NeedShippingAddress {
		n += 3
	}
	if m.SendPhoneNumberToProvider {
		n += 3
	}
	if m.SendEmailToProvider {
		n += 3
	}
	if m.IsFlexible {
		n += 3
	}
	if m.DisableNotification {
		n += 3
	}
	if m.ReplyToMessageId != 0 {
		n += 2 + sovPaymentsMethod(uint64(m.ReplyToMessageId))
	}
	if m.ReplyMarkup != nil {
		l = m.ReplyMarkup.Size()
		n += 2 + l + sovPaymentsMethod(uint64(l))
	}
	return n
}

func sovPaymentsMethod(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPaymentsMethod(x uint64) (n int) {
	return sovPaymentsMethod(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SendInvoice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaymentsMethod
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: sendInvoice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: sendInvoice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentsMethod
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentsMethod
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaymentsMethod
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentsMethod
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaymentsMethod
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentsMethod
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaymentsMethod
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentsMethod
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaymentsMethod
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartParameter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentsMethod
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaymentsMethod
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartParameter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentsMethod
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaymentsMethod
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Currency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentsMethod
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPaymentsMethod
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prices = append(m.Prices, &LabeledPrice{})
			if err := m.Prices[len(m.Prices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentsMethod
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaymentsMethod
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhotoUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentsMethod
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaymentsMethod
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhotoUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhotoSize", wireType)
			}
			m.PhotoSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentsMethod
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PhotoSize |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhotoWidth", wireType)
			}
			m.PhotoWidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentsMethod
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PhotoWidth |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhotoHeight", wireType)
			}
			m.PhotoHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentsMethod
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PhotoHeight |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedName", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentsMethod
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedName = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedPhoneNumber", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentsMethod
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedPhoneNumber = bool(v != 0)
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedEmail", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentsMethod
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedEmail = bool(v != 0)
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedShippingAddress", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentsMethod
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedShippingAddress = bool(v != 0)
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendPhoneNumberToProvider", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentsMethod
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendPhoneNumberToProvider = bool(v != 0)
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendEmailToProvider", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentsMethod
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendEmailToProvider = bool(v != 0)
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFlexible", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentsMethod
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFlexible = bool(v != 0)
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableNotification", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentsMethod
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableNotification = bool(v != 0)
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyToMessageId", wireType)
			}
			m.ReplyToMessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentsMethod
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyToMessageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyMarkup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentsMethod
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPaymentsMethod
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyMarkup == nil {
				m.ReplyMarkup = &InlineKeyboardMarkup{}
			}
			if err := m.ReplyMarkup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPaymentsMethod(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPaymentsMethod
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPaymentsMethod(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPaymentsMethod
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPaymentsMethod
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPaymentsMethod
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPaymentsMethod
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPaymentsMethod
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPaymentsMethod(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPaymentsMethod = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPaymentsMethod   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("payments.method.proto", fileDescriptorPaymentsMethod) }

var fileDescriptorPaymentsMethod = []byte{
	// 589 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x93, 0x5f, 0x6e, 0x13, 0x31,
	0x10, 0x87, 0xb5, 0x94, 0x26, 0xa9, 0x37, 0x4d, 0x5b, 0xf7, 0x9f, 0x29, 0x6a, 0x1a, 0x40, 0x88,
	0x08, 0x89, 0x48, 0xb4, 0x17, 0xa0, 0x08, 0x10, 0x11, 0xb4, 0x8a, 0xd2, 0x22, 0x1e, 0x57, 0xde,
	0xf5, 0x34, 0x6b, 0x75, 0xd7, 0xb6, 0x6c, 0xa7, 0x90, 0x1e, 0x83, 0x53, 0xf1, 0xc8, 0x11, 0x50,
	0x4f, 0x82, 0x3c, 0x4e, 0x4a, 0xfa, 0x96, 0xf9, 0x7d, 0xdf, 0x78, 0x46, 0x8e, 0x97, 0xec, 0x1a,
	0x3e, 0xab, 0x41, 0x79, 0x37, 0xa8, 0xc1, 0x97, 0x5a, 0x0c, 0x8c, 0xd5, 0x5e, 0xd3, 0x56, 0xae,
	0x3d, 0xfe, 0x3a, 0xe8, 0xf8, 0x49, 0xae, 0x3d, 0x37, 0x32, 0x92, 0xe7, 0xbf, 0x9a, 0x24, 0x75,
	0xa0, 0xc4, 0x50, 0xdd, 0x68, 0x59, 0x00, 0xdd, 0x27, 0xcd, 0xa2, 0xe4, 0x3e, 0x93, 0x82, 0x25,
	0xbd, 0xa4, 0xbf, 0x3a, 0x6e, 0x84, 0x72, 0x28, 0xe8, 0x0e, 0x59, 0xf5, 0xd2, 0x57, 0xc0, 0x1e,
	0xf5, 0x92, 0xfe, 0xda, 0x38, 0x16, 0xb4, 0x47, 0x52, 0x01, 0xae, 0xb0, 0xd2, 0x78, 0xa9, 0x15,
	0x5b, 0x41, 0xb6, 0x1c, 0x51, 0x46, 0x9a, 0x86, 0xcf, 0x2a, 0xcd, 0x05, 0x7b, 0x8c, 0x74, 0x51,
	0xd2, 0x97, 0xa4, 0x63, 0xac, 0xbe, 0x91, 0x02, 0x6c, 0xe6, 0xf5, 0x35, 0x28, 0xb6, 0x8a, 0xc2,
	0xfa, 0x22, 0xbd, 0x0c, 0x21, 0x7d, 0x45, 0x36, 0x9c, 0xe7, 0xd6, 0x67, 0x86, 0x5b, 0x5e, 0x83,
	0x07, 0xcb, 0x1a, 0xe8, 0x75, 0x30, 0x1e, 0x2d, 0x52, 0x7a, 0x40, 0x5a, 0xc5, 0xd4, 0x5a, 0x50,
	0xc5, 0x8c, 0x35, 0xd1, 0xb8, 0xaf, 0xe9, 0x80, 0x34, 0x8c, 0x95, 0x05, 0x38, 0xd6, 0xea, 0xad,
	0xf4, 0xd3, 0xe3, 0xbd, 0xc1, 0xe2, 0x46, 0x06, 0x5f, 0x79, 0x0e, 0x15, 0x88, 0x51, 0xc0, 0xe3,
	0xb9, 0x45, 0x5f, 0x90, 0xfb, 0x2d, 0x32, 0xc1, 0x3d, 0x67, 0x6b, 0x78, 0x60, 0x7b, 0x11, 0x7e,
	0xe0, 0x9e, 0xd3, 0xa7, 0x64, 0xcd, 0x94, 0xda, 0xeb, 0x6c, 0x6a, 0x2b, 0x46, 0xe2, 0x44, 0x0c,
	0xbe, 0xd9, 0x8a, 0x1e, 0x12, 0x12, 0xa1, 0x93, 0xb7, 0xc0, 0x52, 0xbc, 0xcb, 0xa8, 0x5f, 0xc8,
	0x5b, 0xa0, 0x47, 0x24, 0x8d, 0xf8, 0x87, 0x14, 0xbe, 0x64, 0x6d, 0xe4, 0xb1, 0xe3, 0x7b, 0x48,
	0xe8, 0x33, 0xd2, 0x8e, 0x42, 0x09, 0x72, 0x52, 0x7a, 0xb6, 0x8e, 0x46, 0x6c, 0xfa, 0x8c, 0x51,
	0x98, 0xaf, 0x00, 0x44, 0xa6, 0x78, 0x0d, 0xac, 0xd3, 0x4b, 0xfa, 0xad, 0x71, 0x2b, 0x04, 0xe7,
	0xbc, 0x06, 0xfa, 0x9a, 0x6c, 0x21, 0x34, 0xa5, 0x56, 0x90, 0xa9, 0x69, 0x9d, 0x83, 0x65, 0x1b,
	0x28, 0x6d, 0x04, 0x30, 0x0a, 0xf9, 0x39, 0xc6, 0x61, 0x57, 0x74, 0xa1, 0xe6, 0xb2, 0x62, 0x9b,
	0x28, 0xe1, 0xd1, 0x1f, 0x43, 0x40, 0x8f, 0xc9, 0x2e, 0x62, 0x57, 0x4a, 0x63, 0xa4, 0x9a, 0x64,
	0x5c, 0x08, 0x0b, 0xce, 0xb1, 0x2d, 0x34, 0xb7, 0x03, 0xbc, 0x98, 0xb3, 0xd3, 0x88, 0xe8, 0x3b,
	0x72, 0x18, 0x9e, 0xd5, 0x83, 0xf1, 0x99, 0xd7, 0xd9, 0xe2, 0x02, 0x19, 0xc5, 0xde, 0x27, 0x41,
	0x5a, 0x5a, 0xe5, 0x52, 0x8f, 0xe6, 0x02, 0x3d, 0x21, 0x7b, 0x78, 0x02, 0x2e, 0xf5, 0xa0, 0x75,
	0x3b, 0x8e, 0x0d, 0x14, 0x17, 0x5c, 0x6a, 0x3a, 0x22, 0xa9, 0x74, 0xd9, 0x55, 0x05, 0x3f, 0x65,
	0x5e, 0x01, 0xdb, 0x41, 0x93, 0x48, 0xf7, 0x69, 0x9e, 0xd0, 0xb7, 0x64, 0x47, 0x48, 0xc7, 0xf3,
	0x0a, 0x32, 0xa5, 0xbd, 0xbc, 0x92, 0x05, 0xc7, 0x97, 0xbb, 0x1b, 0xcf, 0x9c, 0xb3, 0xf3, 0x25,
	0x44, 0xdf, 0x90, 0x6d, 0x0b, 0xa6, 0x9a, 0x85, 0x1d, 0x6a, 0x70, 0x8e, 0x4f, 0x20, 0x7c, 0x1e,
	0x7b, 0xf8, 0x87, 0x6c, 0x22, 0xba, 0xd4, 0x67, 0x11, 0x0c, 0x05, 0x3d, 0x25, 0xed, 0xa8, 0xd7,
	0xdc, 0x5e, 0x4f, 0x0d, 0xdb, 0xef, 0x25, 0xfd, 0xf4, 0xb8, 0xfb, 0xff, 0xc1, 0x0d, 0x55, 0x25,
	0x15, 0x7c, 0x81, 0x59, 0xae, 0xb9, 0x15, 0x67, 0x68, 0x8d, 0x53, 0xec, 0x89, 0xc5, 0xfb, 0xf6,
	0xef, 0xbb, 0x6e, 0xf2, 0xe7, 0xae, 0x9b, 0xfc, 0xbd, 0xeb, 0x26, 0x79, 0x03, 0xdb, 0x4e, 0xfe,
	0x05, 0x00, 0x00, 0xff, 0xff, 0xcb, 0x26, 0x87, 0x7d, 0xdc, 0x03, 0x00, 0x00,
}
